name: "Charts: Lint and test"

on:
  pull_request:
    paths:
    - 'charts/**'
    - 'helper-charts/**'

jobs:
  lint:
    name: Lint charts
    runs-on: ubuntu-20.04
    outputs:
      changed: ${{ steps.list-changed.outputs.changed }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: v3.5.4

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Set up chart-testing
      uses: helm/chart-testing-action@v2.1.0

    - name: Run chart-testing (list-changed)
      id: list-changed
      run: |
        changed=$(ct list-changed --config .github/ct-lint.yaml)
        if [[ -n "$changed" ]]; then
          echo "::set-output name=changed::true"
        fi

    - name: Run chart-testing (lint)
      id: lint
      if: steps.list-changed.outputs.changed == 'true'
      run: ct lint --config .github/ct-lint.yaml

  unittest:
    needs:
    - lint
    name: Run unit tests
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-go@v2
      with:
        go-version: '^1.16'

    # Get values for cache paths to be used in later steps
    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"

    # Cache go build cache, used to speedup go test
    - name: Go Build Cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

    - name: Download modules
      run: |
        go mod download

    - name: Run tests
      run: |
        go test ./charts/.../tests -json | tee test.json

    - name: Annotate tests
      if: always()
      uses: guyarb/golang-test-annotations@v0.4.0
      with:
        test-results: test.json

  install:
    needs:
    - lint
    name: Install charts
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: v3.5.4

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Set up chart-testing
      uses: helm/chart-testing-action@v2.1.0

    - name: Create k3d cluster
      uses: nolar/setup-k3d-k3s@v1
      with:
        version: v1.19
      if: needs.lint.outputs.changed == 'true'

    - name: Run chart-testing (install)
      run: ct install --config .github/ct-install.yaml
      if: needs.lint.outputs.changed == 'true'
